import os
import json
import random
import logging
import uuid
import asyncio
from datetime import datetime, timezone, timedelta
from fastapi import FastAPI, HTTPException, Request, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, Any, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Gnome Horoscope API",
    version="2.0.0",
    description="üßô‚Äç‚ôÇÔ∏è API –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ì–Ω–æ–º–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============ –ú–û–î–ï–õ–ò ============
class FavoriteRequest(BaseModel):
    initData: str = ""
    type: str
    content: Any

class CreateRoomRequest(BaseModel):
    game_type: str
    creator_name: str
    initData: str = ""

class JoinRoomRequest(BaseModel):
    room_id: str
    player_name: str
    initData: str = ""

class AnswerRequest(BaseModel):
    room_id: str
    player_name: str
    question_id: int
    answer: str
    initData: str = ""

# ============ WEBSOCKET –ú–ï–ù–ï–î–ñ–ï–† ============
class GameConnectionManager:
    def __init__(self):
        self.room_connections: Dict[str, List[WebSocket]] = {}
    
    async def connect(self, room_id: str, websocket: WebSocket):
        await websocket.accept()
        if room_id not in self.room_connections:
            self.room_connections[room_id] = []
        self.room_connections[room_id].append(websocket)
        logger.info(f"üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        await self.broadcast_to_room(room_id, {
            "type": "player_joined",
            "players_count": len(self.room_connections[room_id])
        })
    
    async def disconnect(self, room_id: str, websocket: WebSocket):
        if room_id in self.room_connections:
            if websocket in self.room_connections[room_id]:
                self.room_connections[room_id].remove(websocket)
            
            if not self.room_connections[room_id]:
                del self.room_connections[room_id]
            else:
                await self.broadcast_to_room(room_id, {
                    "type": "player_left",
                    "players_count": len(self.room_connections[room_id])
                })
    
    async def broadcast_to_room(self, room_id: str, message: dict):
        if room_id in self.room_connections:
            dead_connections = []
            
            for connection in self.room_connections[room_id]:
                try:
                    await connection.send_json(message)
                except Exception as e:
                    logger.warning(f"WebSocket error: {e}")
                    dead_connections.append(connection)
            
            # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for dead in dead_connections:
                self.room_connections[room_id].remove(dead)

connection_manager = GameConnectionManager()

# ============ –î–ê–ù–ù–´–ï ============
HOROSCOPE_TEMPLATES = [
    "–ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –≤–∞–º –ø—Ä–æ—è–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É! –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
    "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ - –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥–µ—Ç –≤ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö.",
    "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
    "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª–∞—Ö, –±–ª–∏–∑–∫–∏–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
    "–í—Ä–µ–º—è –ø—Ä–æ—è–≤–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏! –ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.",
    "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–µ–ª–∞–º –ø—Ä–∏–Ω–µ—Å–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
    "–ò—â–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ–º - —Ä–∞–±–æ—Ç–µ, –æ—Ç–¥—ã—Ö–µ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
    "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
    "–†–∞—Å—à–∏—Ä—å—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã! –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ—Ç–∫—Ä–æ—é—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã.",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏.",
    "–í—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö –∏–¥–µ–π –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π!",
    "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Ç–µ—á–µ–Ω–∏—é –∂–∏–∑–Ω–∏, –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å."
]

DAY_CARDS = [
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç", "—Å–æ–≤–µ—Ç": "–°–µ–≥–æ–¥–Ω—è –≤—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π! –ù–µ –±–æ–π—Å—è —Ä–∏—Å–∫–Ω—É—Ç—å - —Ñ–æ—Ä—Ç—É–Ω–∞ –ª—é–±–∏—Ç —Ö—Ä–∞–±—Ä—ã—Ö."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ø–æ–≤–∞—Ä", "—Å–æ–≤–µ—Ç": "–î–µ–Ω—å –¥–ª—è –∑–∞–±–æ—Ç—ã –æ —Å–≤–æ–µ–º —Ç–µ–ª–µ –∏ –¥—É—à–µ. –ü—Ä–∏–≥–æ—Ç–æ–≤—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –∏–ª–∏ –ø–æ–±–∞–ª—É–π —Å–µ–±—è."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Å–∞–¥–æ–≤–Ω–∏–∫", "—Å–æ–≤–µ—Ç": "–í—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ–Ω–∞ –±—É–¥—É—â–∏—Ö —É—Å–ø–µ—Ö–æ–≤. –ù–µ–±–æ–ª—å—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å—É—Ç –±–æ–ª—å—à–∏–µ –ø–ª–æ–¥—ã."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", "—Å–æ–≤–µ—Ç": "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–º—É–∑—ã–∫–∞–Ω—Ç", "—Å–æ–≤–µ—Ç": "–ù–∞–π–¥–∏ —Å–≤–æ–π —Ä–∏—Ç–º –¥–Ω—è. –í–∫–ª—é—á–∏ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É –∏ –ø–æ–∑–≤–æ–ª—å –º–µ–ª–æ–¥–∏–∏ –≤–µ—Å—Ç–∏ —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Ñ–∏–ª–æ—Å–æ—Ñ", "—Å–æ–≤–µ—Ç": "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–µ—Å—É—Ç —è—Å–Ω–æ—Å—Ç—å. –£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑—É —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –∏ –∂–µ–ª–∞–Ω–∏–π."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫", "—Å–æ–≤–µ—Ç": "–ù–æ–≤—ã–µ –º–µ—Å—Ç–∞ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç! –î–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–º–∞—Å—Ç–µ—Ä", "—Å–æ–≤–µ—Ç": "–†—É–∫–∏ –ø–æ–º–Ω—è—Ç –º—É–¥—Ä–æ—Å—Ç—å. –ó–∞–π–º–∏—Ç–µ—Å—å –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º –∏–ª–∏ –æ—Å–≤–æ–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Ç–æ—Ä–≥–æ–≤–µ—Ü", "—Å–æ–≤–µ—Ç": "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –±—É–¥—É—â–µ–µ!"},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ª–µ–∫–∞—Ä—å", "—Å–æ–≤–µ—Ç": "–ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ. –ù–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å", "—Å–æ–≤–µ—Ç": "–í—Ä–µ–º—è –∑–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –¢–µ—Ä–ø–µ–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø—Ä–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∑–≤–µ–∑–¥–æ—á–µ—Ç", "—Å–æ–≤–µ—Ç": "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –∑–Ω–∞–∫–∞–º –í—Å–µ–ª–µ–Ω–Ω–æ–π. –°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –∏–Ω—Ç—É–∏—Ü–∏—è –∏ –º–µ—á—Ç—ã."}
]

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä –∏–∑ questions.json
COUPLE_GAMES_DATA = {
    "fruit_game": [
        {
            "question": "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üçé –Ø–±–ª–æ–∫–æ", "üçå –ë–∞–Ω–∞–Ω", "üçä –ê–ø–µ–ª—å—Å–∏–Ω", "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "ü•≠ –ú–∞–Ω–≥–æ", "üçì –ö–ª—É–±–Ω–∏–∫–∞"],
            "category": "taste"
        },
        {
            "question": "–ö–∞–∫–æ–π —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ—Ä—É–∫—Ç —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["ü•• –ö–æ–∫–æ—Å", "ü•ù –ö–∏–≤–∏", "üçç –ê–Ω–∞–Ω–∞—Å", "ü•≠ –ú–∞–Ω–≥–æ", "üçà –î—ã–Ω—è", "üçë –ß–µ—Ä–µ—à–Ω—è"],
            "category": "taste"
        },
        {
            "question": "–ö–∞–∫—É—é —è–≥–æ–¥—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üçì –ö–ª—É–±–Ω–∏–∫–∞", "ü´ê –ß–µ—Ä–Ω–∏–∫–∞", "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "üçí –í–∏—à–Ω—è", "üçà –ö—Ä—ã–∂–æ–≤–Ω–∏–∫", "üçë –ú–∞–ª–∏–Ω–∞"],
            "category": "taste"
        }
    ],
    "preference_test": [
        {
            "question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É?",
            "options": ["‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–π", "üíô –°–∏–Ω–∏–π", "üíö –ó–µ–ª–µ–Ω—ã–π", "üíõ –ñ–µ–ª—Ç—ã–π", "üíú –§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "üñ§ –ß–µ—Ä–Ω—ã–π"],
            "category": "colors"
        },
        {
            "question": "–ö–∞–∫—É—é –º—É–∑—ã–∫—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üé∏ –†–æ–∫", "üéµ –ü–æ–ø", "üéπ –ö–ª–∞—Å—Å–∏–∫–∞", "üé∫ –î–∂–∞–∑", "üé§ –†—ç–ø", "üéª –ò–Ω–¥–∏"],
            "category": "music"
        },
        {
            "question": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ª—é–±–∏—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üå∏ –í–µ—Å–Ω–∞", "‚òÄÔ∏è –õ–µ—Ç–æ", "üçÇ –û—Å–µ–Ω—å", "‚ùÑÔ∏è –ó–∏–º–∞"],
            "category": "seasons"
        }
    ],
    "date_ideas": [
        {
            "question": "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
            "options": ["üé¨ –ö–∏–Ω–æ", "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω", "üèûÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ", "üè† –î–æ–º–∞ —Å —Ñ–∏–ª—å–º–æ–º", "üé≠ –¢–µ–∞—Ç—Ä", "üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
            "category": "date_type"
        },
        {
            "question": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üåÖ –£—Ç—Ä–æ", "‚òÄÔ∏è –î–µ–Ω—å", "üåÜ –í–µ—á–µ—Ä", "üåô –ù–æ—á—å"],
            "category": "date_time"
        }
    ]
}

# ============ –•–†–ê–ù–ò–õ–ò–©–ê ============
user_favorites = {}
game_rooms: Dict[str, Dict[str, Any]] = {}

# ‚úÖ –ù–û–í–û–ï: –ö—ç—à –∫–∞—Ä—Ç –¥–Ω—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã–¥–∞—á–∏
daily_cards_cache = {}

# ============ –û–°–ù–û–í–ù–´–ï –†–û–£–¢–´ ============
@app.get("/")
async def root():
    return {
        "message": "üßô‚Äç‚ôÇÔ∏è Gnome Horoscope API is running!",
        "status": "ok",
        "version": "2.0.0",
        "endpoints": [
            "GET /health",
            "GET /api/horoscope?sign=–ó–ù–ê–ö",
            "POST /api/day-card",
            "GET /api/favorites",
            "POST /api/favorites",
            "POST /api/create-room",
            "POST /api/join-room",
            "GET /api/room-status/{room_id}",
            "GET /api/game-question/{room_id}",
            "POST /api/submit-answer",
            "GET /api/game-results/{room_id}"
        ]
    }

@app.get("/health")
async def health():
    return {
        "status": "ok",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "service": "Gnome Horoscope API",
        "rooms_count": len(game_rooms)
    }

@app.get("/api/horoscope")
async def get_horoscope(sign: str, date: str = None):
    try:
        if date is None:
            date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign} –Ω–∞ {date}")
        
        # ‚úÖ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–∫–∞ –∏ –¥–∞—Ç—ã
        seed = hash(f"{sign}{date}") % len(HOROSCOPE_TEMPLATES)
        horoscope_text = HOROSCOPE_TEMPLATES[seed]
        
        return {
            "sign": sign,
            "date": date,
            "text": horoscope_text,
            "cached": False,
            "source": "Gnome Horoscope API"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞")

@app.post("/api/day-card")
async def get_day_card(request: Dict[str, Any] = None):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–Ω—è - –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞ –¥–µ–Ω—å"""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –¥–Ω—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if current_date in daily_cards_cache:
            card_data = daily_cards_cache[current_date]
            logger.info(f"üì¶ –ö–∞—Ä—Ç–∞ –¥–Ω—è –∏–∑ –∫—ç—à–∞ –¥–ª—è {current_date}")
        else:
            # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã
            date_seed = hash(current_date) % len(DAY_CARDS)
            selected_card = DAY_CARDS[date_seed]
            
            card_data = {
                "title": selected_card["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
                "text": selected_card["—Å–æ–≤–µ—Ç"],
                "reused": False,
                "date": current_date,
                "source": "Gnome Horoscope API"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            daily_cards_cache[current_date] = card_data
            logger.info(f"üÜï –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–Ω—è –¥–ª—è {current_date}: {selected_card['–Ω–∞–∑–≤–∞–Ω–∏–µ']}")
        
        return card_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è")

@app.get("/api/favorites")
async def get_favorites(initData: str = ""):
    try:
        user_id = initData or "anonymous"
        favorites = user_favorites.get(user_id, [])
        return {
            "favorites": favorites,
            "success": True,
            "message": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
            "count": len(favorites)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

@app.post("/api/favorites")
async def add_favorite(request: FavoriteRequest):
    try:
        user_id = request.initData or "anonymous"
        if user_id not in user_favorites:
            user_favorites[user_id] = []
        
        favorite_item = {
            "type": request.type,
            "content": request.content,
            "added_at": datetime.now(timezone.utc).isoformat()
        }
        
        user_favorites[user_id].append(favorite_item)
        return {
            "success": True,
            "message": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "total_favorites": len(user_favorites[user_id])
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

# ============ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –†–û–£–¢–´ –î–õ–Ø –ò–ì–† ============

@app.post("/api/create-room")
async def create_room(request: CreateRoomRequest):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        room_id = str(uuid.uuid4())[:8].upper()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
        room = {
            "room_id": room_id,
            "created_at": datetime.now(timezone.utc),
            "players": [request.creator_name],
            "game_type": request.game_type,
            "current_question": 0,
            "answers": {},
            "status": "waiting"
        }
        
        game_rooms[room_id] = room
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ {room_id} –¥–ª—è –∏–≥—Ä—ã {request.game_type}")
        
        return {
            "success": True,
            "room_id": room_id,
            "message": f"–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: {room_id}",
            "game_type": request.game_type,
            "creator": request.creator_name
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")

@app.post("/api/join-room")
async def join_room(request: JoinRoomRequest):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ"""
    try:
        room = game_rooms.get(request.room_id)
        
        if not room:
            logger.warning(f"‚ùå –ö–æ–º–Ω–∞—Ç–∞ {request.room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {"success": False, "message": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        if len(room["players"]) >= 2:
            logger.warning(f"‚ùå –ö–æ–º–Ω–∞—Ç–∞ {request.room_id} –ø–æ–ª–Ω–∞")
            return {"success": False, "message": "–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞"}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if request.player_name not in room["players"]:
            room["players"].append(request.player_name)
            logger.info(f"‚úÖ –ò–≥—Ä–æ–∫ {request.player_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {request.room_id}")
        
        # –ï—Å–ª–∏ –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        if len(room["players"]) == 2:
            room["status"] = "playing"
            logger.info(f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ {request.room_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
            await connection_manager.broadcast_to_room(request.room_id, {
                "type": "game_started",
                "players": room["players"],
                "status": "playing"
            })
        
        return {
            "success": True,
            "message": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!" if len(room["players"]) == 2 else "–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
            "players": room["players"],
            "status": room["status"],
            "room_id": request.room_id
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ")

@app.get("/api/room-status/{room_id}")
async def get_room_status(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        room = game_rooms.get(room_id)
        
        if not room:
            logger.warning(f"‚ùå –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã: {room_id}")
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return {
            "room_id": room_id,
            "players": room["players"],
            "status": room["status"],
            "current_question": room["current_question"],
            "player_count": len(room["players"]),
            "game_type": room["game_type"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@app.get("/api/game-question/{room_id}")
async def get_game_question(room_id: str):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–≥—Ä—ã"""
    try:
        room = game_rooms.get(room_id)
        
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∏–ø–∞ –∏–≥—Ä—ã
        game_questions = []
        if room["game_type"] == "mixed":
            # –°–º–µ—à–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ - –≤—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            for category in COUPLE_GAMES_DATA.values():
                game_questions.extend(category)
        else:
            game_questions = COUPLE_GAMES_DATA.get(room["game_type"], [])
        
        if not game_questions:
            logger.error(f"‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –∏–≥—Ä—ã: {room['game_type']}")
            raise HTTPException(status_code=500, detail="–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–≥—Ä—ã")
        
        if room["current_question"] >= len(game_questions):
            room["status"] = "completed"
            logger.info(f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
            return {"completed": True, "message": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"}
        
        question = game_questions[room["current_question"]]
        
        logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å {room['current_question']+1}/{len(game_questions)} –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")
        
        return {
            "question_id": room["current_question"],
            "question": question["question"],
            "options": question["options"],
            "category": question["category"],
            "total_questions": len(game_questions),
            "current_number": room["current_question"] + 1
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞")

@app.post("/api/submit-answer")
async def submit_answer(request: AnswerRequest):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    try:
        room = game_rooms.get(request.room_id)
        
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answer_key = f"{request.question_id}_{request.player_name}"
        room["answers"][answer_key] = request.answer
        
        logger.info(f"üí≠ –û—Ç–≤–µ—Ç –æ—Ç {request.player_name} –≤ –∫–æ–º–Ω–∞—Ç–µ {request.room_id}: {request.answer}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
        other_player = None
        for player in room["players"]:
            if player != request.player_name:
                other_player = player
                break
        
        both_answered = False
        if other_player:
            other_answer_key = f"{request.question_id}_{other_player}"
            both_answered = other_answer_key in room["answers"]
            
            if both_answered:
                room["current_question"] += 1
                logger.info(f"‚úÖ –û–±–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ {request.room_id}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É {room['current_question']}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                await connection_manager.broadcast_to_room(request.room_id, {
                    "type": "next_question",
                    "current_question": room["current_question"]
                })
            else:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —á—Ç–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∏–ª
                await connection_manager.broadcast_to_room(request.room_id, {
                    "type": "partner_answered",
                    "question_id": request.question_id,
                    "player": request.player_name
                })
        
        return {
            "success": True,
            "waiting_for_partner": not both_answered,
            "message": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!" if not both_answered else "–û–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.",
            "current_question": room["current_question"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")

@app.get("/api/game-results/{room_id}")
async def get_game_results(room_id: str):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã"""
    try:
        room = game_rooms.get(room_id)
        
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if room["status"] != "completed":
            return {"completed": False, "message": "–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
        
        matches = 0
        total_questions = room["current_question"]
        results = []
        
        if len(room["players"]) >= 2:
            for q_id in range(total_questions):
                player1_answer = room["answers"].get(f"{q_id}_{room['players'][0]}")
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—ã–ª–æ  –≤–º–µ—Å—Ç–æ [1]
                player2_answer = room["answers"].get(f"{q_id}_{room['players'][1]}")
                
                match = player1_answer == player2_answer
                if match:
                    matches += 1
                
                results.append({
                    "question_id": q_id,
                    "player1_answer": player1_answer,
                    "player2_answer": player2_answer,
                    "match": match
                })
        
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≥–Ω–æ–º–∞–º
        compatibility_percent = (matches / total_questions) * 100 if total_questions > 0 else 0
        gnome_analysis = get_gnome_compatibility_analysis(compatibility_percent)
        
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}: {matches}/{total_questions} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ({compatibility_percent:.1f}%)")
        
        return {
            "completed": True,
            "matches": matches,
            "total_questions": total_questions,
            "compatibility_percent": round(compatibility_percent, 1),
            "results": results,
            "gnome_analysis": gnome_analysis,
            "players": room["players"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# ============ WEBSOCKET ============
@app.websocket("/ws/game/{room_id}")
async def websocket_game_endpoint(websocket: WebSocket, room_id: str):
    """‚úÖ WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await connection_manager.connect(room_id, websocket)
    
    try:
        while True:
            # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_json()
            logger.info(f"üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}: {data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if data.get("type") == "ping":
                await websocket.send_json({"type": "pong"})
            elif data.get("type") == "answer_submitted":
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–± –æ—Ç–≤–µ—Ç–µ
                await connection_manager.broadcast_to_room(room_id, {
                    "type": "partner_answered",
                    "question_id": data.get("question_id"),
                    "player": data.get("player")
                })
            elif data.get("type") == "join_notification":
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
                await connection_manager.broadcast_to_room(room_id, {
                    "type": "player_joined",
                    "player": data.get("player")
                })
                
    except WebSocketDisconnect:
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–æ–º–Ω–∞—Ç—ã {room_id}")
        await connection_manager.disconnect(room_id, websocket)
    except Exception as e:
        logger.error(f"‚ùå WebSocket error: {e}")
        await connection_manager.disconnect(room_id, websocket)

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============
def get_gnome_compatibility_analysis(percent: float) -> dict:
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–Ω–æ–º–æ–≤"""
    if percent >= 80:
        return {
            "gnome": "–ì–Ω–æ–º-–°–µ—Ä–¥—Ü–µ–≤–µ–¥",
            "title": "–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞! üíï",
            "message": "–ì–Ω–æ–º-–°–µ—Ä–¥—Ü–µ–≤–µ–¥ –≤–æ—Å—Ö–∏—â–µ–Ω: '–í—ã —Å–ª–æ–≤–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞! –í–∞—à–∏ –¥—É—à–∏ –ø–æ—é—Ç –≤ —É–Ω–∏—Å–æ–Ω!'",
            "advice": "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - —É –≤–∞—Å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –±—É–¥—É—â–µ–≥–æ!",
            "color": "#ff69b4"
        }
    elif percent >= 60:
        return {
            "gnome": "–ì–Ω–æ–º-–ú—É–¥—Ä–µ—Ü",
            "title": "–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! üíñ",
            "message": "–ì–Ω–æ–º-–ú—É–¥—Ä–µ—Ü –∫–∏–≤–∞–µ—Ç: '–í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –≠—Ç–æ –∫—Ä–µ–ø–∫–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π!'",
            "advice": "–£–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—â–µ–Ω–∏—é - —É–∑–Ω–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –µ—â–µ –ª—É—á—à–µ!",
            "color": "#4169e1"
        }
    elif percent >= 40:
        return {
            "gnome": "–ì–Ω–æ–º-–î–∏–ø–ª–æ–º–∞—Ç",
            "title": "–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! üíô",
            "message": "–ì–Ω–æ–º-–î–∏–ø–ª–æ–º–∞—Ç —Ä–∞–∑–º—ã—à–ª—è–µ—Ç: '–£ –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!'",
            "advice": "–ë–æ–ª—å—à–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö. –†–∞–∑–ª–∏—á–∏—è –º–æ–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Å–∏–ª—É!",
            "color": "#32cd32"
        }
    else:
        return {
            "gnome": "–ì–Ω–æ–º-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            "title": "–í—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏–π! üíõ",
            "message": "–ì–Ω–æ–º-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —É–ª—ã–±–∞–µ—Ç—Å—è: '–í—ã - –¥–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏! –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!'",
            "advice": "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ò–∑—É—á–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –õ—é–±–æ–≤—å —Ä–∞—Å—Ç–µ—Ç —á–µ—Ä–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!",
            "color": "#ffa500"
        }

# ‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞—Ä—Ç –¥–Ω—è (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
async def cleanup_daily_cache():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ä—Ç –¥–Ω—è"""
    current_date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    dates_to_delete = [date for date in daily_cards_cache.keys() if date != current_date]
    
    for old_date in dates_to_delete:
        del daily_cards_cache[old_date]
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è –¥–ª—è {old_date}")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç
async def cleanup_old_rooms():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤"""
    cutoff_time = datetime.now(timezone.utc) - timedelta(hours=2)
    
    rooms_to_delete = []
    for room_id, room in game_rooms.items():
        if isinstance(room["created_at"], datetime) and room["created_at"] < cutoff_time:
            rooms_to_delete.append(room_id)
    
    for room_id in rooms_to_delete:
        del game_rooms[room_id]
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–æ–º–Ω–∞—Ç–∞ {room_id}")

@app.get("/robots.txt")
async def robots_txt():
    return "User-agent: *\nDisallow: /"

# –î–ª—è Render deployment
# –í –∫–æ–Ω—Ü–µ main.py –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—É—Å–∫:
# –í –∫–æ–Ω—Ü–µ main.py
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Gnome Horoscope API –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WebSocket
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port,
        ws_ping_interval=20,      # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
        ws_ping_timeout=20,       # –¢–∞–π–º–∞—É—Ç –ø–∏–Ω–≥–∞ 20 —Å–µ–∫—É–Ω–¥
        access_log=True
    )


