import os
import json
import random
import logging
import uuid
import traceback
from datetime import datetime, timezone, timedelta
from pathlib import Path
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Dict, Any, List, Optional

# ============ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ============
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ============ –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ============
app = FastAPI(
    title="Gnome Horoscope API",
    version="2.0.0",
    description="üßô‚Äç‚ôÇÔ∏è API –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ì–Ω–æ–º–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø"
)

# ============ CORS –ù–ê–°–¢–†–û–ô–ö–ê ============
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost",
        "http://localhost:3000",
        "http://localhost:8080",
        "https://gilded-blancmange-ecc392.netlify.app",
        "https://*.netlify.app",
        "*"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ============
@app.exception_handler(500)
async def internal_server_error_handler(request, exc):
    logger.error(f"‚ùå 500 Error –Ω–∞ {request.url}: {str(exc)}")
    logger.error(f"üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    return JSONResponse(
        status_code=500,
        content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "error": str(exc)}
    )

# ============ –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ============
class FavoriteRequest(BaseModel):
    initData: str = ""
    type: str
    content: Any

class CreateRoomRequest(BaseModel):
    game_type: str
    creator_name: str
    initData: str = ""

class JoinRoomRequest(BaseModel):
    room_id: str
    player_name: str
    initData: str = ""

class AnswerRequest(BaseModel):
    room_id: str
    player_name: str
    question_id: int
    answer: str
    initData: str = ""

# ============ –î–ê–ù–ù–´–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ============
HOROSCOPE_TEMPLATES = [
    "–ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –≤–∞–º –ø—Ä–æ—è–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É! –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
    "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ - –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥–µ—Ç –≤ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö.",
    "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
    "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª–∞—Ö, –±–ª–∏–∑–∫–∏–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
    "–í—Ä–µ–º—è –ø—Ä–æ—è–≤–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏! –ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.",
    "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–µ–ª–∞–º –ø—Ä–∏–Ω–µ—Å–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
    "–ò—â–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ–º - —Ä–∞–±–æ—Ç–µ, –æ—Ç–¥—ã—Ö–µ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
    "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
    "–†–∞—Å—à–∏—Ä—å—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã! –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ—Ç–∫—Ä–æ—é—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã.",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏.",
    "–í—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö –∏–¥–µ–π –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π!",
    "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Ç–µ—á–µ–Ω–∏—é –∂–∏–∑–Ω–∏, –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å."
]

DAY_CARDS = [
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç", "—Å–æ–≤–µ—Ç": "–°–µ–≥–æ–¥–Ω—è –≤—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π! –ù–µ –±–æ–π—Å—è —Ä–∏—Å–∫–Ω—É—Ç—å - —Ñ–æ—Ä—Ç—É–Ω–∞ –ª—é–±–∏—Ç —Ö—Ä–∞–±—Ä—ã—Ö."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ø–æ–≤–∞—Ä", "—Å–æ–≤–µ—Ç": "–î–µ–Ω—å –¥–ª—è –∑–∞–±–æ—Ç—ã –æ —Å–≤–æ–µ–º —Ç–µ–ª–µ –∏ –¥—É—à–µ. –ü—Ä–∏–≥–æ—Ç–æ–≤—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –∏–ª–∏ –ø–æ–±–∞–ª—É–π —Å–µ–±—è."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Å–∞–¥–æ–≤–Ω–∏–∫", "—Å–æ–≤–µ—Ç": "–í—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ–Ω–∞ –±—É–¥—É—â–∏—Ö —É—Å–ø–µ—Ö–æ–≤. –ù–µ–±–æ–ª—å—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å—É—Ç –±–æ–ª—å—à–∏–µ –ø–ª–æ–¥—ã."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", "—Å–æ–≤–µ—Ç": "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–º—É–∑—ã–∫–∞–Ω—Ç", "—Å–æ–≤–µ—Ç": "–ù–∞–π–¥–∏ —Å–≤–æ–π —Ä–∏—Ç–º –¥–Ω—è. –í–∫–ª—é—á–∏ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É –∏ –ø–æ–∑–≤–æ–ª—å –º–µ–ª–æ–¥–∏–∏ –≤–µ—Å—Ç–∏ —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Ñ–∏–ª–æ—Å–æ—Ñ", "—Å–æ–≤–µ—Ç": "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–µ—Å—É—Ç —è—Å–Ω–æ—Å—Ç—å. –£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑—É —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –∏ –∂–µ–ª–∞–Ω–∏–π."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫", "—Å–æ–≤–µ—Ç": "–ù–æ–≤—ã–µ –º–µ—Å—Ç–∞ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç! –î–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–º–∞—Å—Ç–µ—Ä", "—Å–æ–≤–µ—Ç": "–†—É–∫–∏ –ø–æ–º–Ω—è—Ç –º—É–¥—Ä–æ—Å—Ç—å. –ó–∞–π–º–∏—Ç–µ—Å—å –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º –∏–ª–∏ –æ—Å–≤–æ–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Ç–æ—Ä–≥–æ–≤–µ—Ü", "—Å–æ–≤–µ—Ç": "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –±—É–¥—É—â–µ–µ!"},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ª–µ–∫–∞—Ä—å", "—Å–æ–≤–µ—Ç": "–ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ. –ù–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å", "—Å–æ–≤–µ—Ç": "–í—Ä–µ–º—è –∑–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –¢–µ—Ä–ø–µ–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø—Ä–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∑–≤–µ–∑–¥–æ—á–µ—Ç", "—Å–æ–≤–µ—Ç": "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –∑–Ω–∞–∫–∞–º –í—Å–µ–ª–µ–Ω–Ω–æ–π. –°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –∏–Ω—Ç—É–∏—Ü–∏—è –∏ –º–µ—á—Ç—ã."}
]

# ============ –ó–ê–ì–†–£–ó–ö–ê –í–û–ü–†–û–°–û–í ============
COUPLE_GAMES_DATA = {}

def load_questions_from_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global COUPLE_GAMES_DATA
    
    possible_paths = [
        "questions.json",
        "./questions.json",
        "modules/couple-games/questions.json",
        "./modules/couple-games/questions.json"
    ]
    
    for file_path in possible_paths:
        try:
            if Path(file_path).exists():
                logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤: {file_path}")
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    COUPLE_GAMES_DATA = json.load(f)
                
                total_questions = sum(len(category) for category in COUPLE_GAMES_DATA.values())
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {len(COUPLE_GAMES_DATA)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
                for category, questions in COUPLE_GAMES_DATA.items():
                    logger.info(f"  - {category}: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                
                return True
                
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
            continue
    
    # Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    logger.warning("‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ")
    COUPLE_GAMES_DATA = {
        "fruit_game": [
            {"question": "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?", "options": ["üçé –Ø–±–ª–æ–∫–æ", "üçå –ë–∞–Ω–∞–Ω", "üçä –ê–ø–µ–ª—å—Å–∏–Ω", "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "ü•≠ –ú–∞–Ω–≥–æ", "üçì –ö–ª—É–±–Ω–∏–∫–∞"], "category": "taste"},
            {"question": "–ö–∞–∫–æ–π —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ—Ä—É–∫—Ç —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?", "options": ["ü•• –ö–æ–∫–æ—Å", "ü•ù –ö–∏–≤–∏", "üçç –ê–Ω–∞–Ω–∞—Å", "ü•≠ –ú–∞–Ω–≥–æ", "üçà –î—ã–Ω—è", "üçë –ß–µ—Ä–µ—à–Ω—è"], "category": "taste"},
            {"question": "–ö–∞–∫—É—é —è–≥–æ–¥—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?", "options": ["üçì –ö–ª—É–±–Ω–∏–∫–∞", "ü´ê –ß–µ—Ä–Ω–∏–∫–∞", "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "üçí –í–∏—à–Ω—è", "ü•ù –ö—Ä—ã–∂–æ–≤–Ω–∏–∫", "üçë –ú–∞–ª–∏–Ω–∞"], "category": "taste"}
        ],
        "preference_test": [
            {"question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É?", "options": ["‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–π", "üíô –°–∏–Ω–∏–π", "üíö –ó–µ–ª–µ–Ω—ã–π", "üíõ –ñ–µ–ª—Ç—ã–π", "üíú –§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "üñ§ –ß–µ—Ä–Ω—ã–π"], "category": "colors"},
            {"question": "–ö–∞–∫—É—é –º—É–∑—ã–∫—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?", "options": ["üé∏ –†–æ–∫", "üéµ –ü–æ–ø", "üéπ –ö–ª–∞—Å—Å–∏–∫–∞", "üé∫ –î–∂–∞–∑", "üé§ –†—ç–ø", "üéª –ò–Ω–¥–∏"], "category": "music"},
            {"question": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ª—é–±–∏—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?", "options": ["üå∏ –í–µ—Å–Ω–∞", "‚òÄÔ∏è –õ–µ—Ç–æ", "üçÇ –û—Å–µ–Ω—å", "‚ùÑÔ∏è –ó–∏–º–∞"], "category": "seasons"}
        ],
        "date_ideas": [
            {"question": "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:", "options": ["üé¨ –ö–∏–Ω–æ", "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω", "üèûÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ", "üè† –î–æ–º–∞ —Å —Ñ–∏–ª—å–º–æ–º", "üé≠ –¢–µ–∞—Ç—Ä", "üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"], "category": "date_type"},
            {"question": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä?", "options": ["üåÖ –£—Ç—Ä–æ", "‚òÄÔ∏è –î–µ–Ω—å", "üåÜ –í–µ—á–µ—Ä", "üåô –ù–æ—á—å"], "category": "date_time"}
        ]
    }
    return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_questions_from_file()

# ============ –•–†–ê–ù–ò–õ–ò–©–ê –î–ê–ù–ù–´–• ============
user_favorites = {}
game_rooms: Dict[str, Dict[str, Any]] = {}
daily_cards_cache = {}

# ============ –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ============
@app.get("/")
async def root():
    total_questions = sum(len(category) for category in COUPLE_GAMES_DATA.values())
    return {
        "message": "üßô‚Äç‚ôÇÔ∏è Gnome Horoscope API is running!",
        "status": "ok",
        "version": "2.0.0",
        "loaded_questions": total_questions,
        "categories": list(COUPLE_GAMES_DATA.keys()),
        "endpoints": [
            "GET /health",
            "GET /api/questions",
            "GET /api/horoscope?sign=–ó–ù–ê–ö",
            "POST /api/day-card",
            "GET /api/favorites",
            "POST /api/favorites",
            "POST /api/create-room",
            "POST /api/join-room",
            "GET /api/room-status/{room_id}",
            "GET /api/game-question/{room_id}",
            "POST /api/submit-answer",
            "GET /api/game-results/{room_id}"
        ]
    }

@app.get("/health")
async def health():
    return {
        "status": "ok",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "service": "Gnome Horoscope API",
        "rooms_count": len(game_rooms)
    }

@app.get("/api/horoscope")
async def get_horoscope(sign: str, date: str = None):
    try:
        if date is None:
            date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign} –Ω–∞ {date}")
        
        seed = hash(f"{sign}{date}") % len(HOROSCOPE_TEMPLATES)
        horoscope_text = HOROSCOPE_TEMPLATES[seed]
        
        return {
            "sign": sign,
            "date": date,
            "text": horoscope_text,
            "cached": False,
            "source": "Gnome Horoscope API"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞")

@app.post("/api/day-card")
async def get_day_card(request: Dict[str, Any] = None):
    """–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–Ω—è"""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –¥–Ω—è")
        
        current_date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        
        if current_date in daily_cards_cache:
            card_data = daily_cards_cache[current_date]
            logger.info(f"üì¶ –ö–∞—Ä—Ç–∞ –¥–Ω—è –∏–∑ –∫—ç—à–∞ –¥–ª—è {current_date}")
        else:
            date_seed = hash(current_date) % len(DAY_CARDS)
            selected_card = DAY_CARDS[date_seed]
            
            card_data = {
                "title": selected_card["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
                "text": selected_card["—Å–æ–≤–µ—Ç"],
                "reused": False,
                "date": current_date,
                "source": "Gnome Horoscope API"
            }
            
            daily_cards_cache[current_date] = card_data
            logger.info(f"üÜï –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–Ω—è –¥–ª—è {current_date}: {selected_card['–Ω–∞–∑–≤–∞–Ω–∏–µ']}")
        
        return card_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è")

@app.get("/api/favorites")
async def get_favorites(initData: str = ""):
    try:
        user_id = initData or "anonymous"
        favorites = user_favorites.get(user_id, [])
        return {
            "favorites": favorites,
            "success": True,
            "message": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
            "count": len(favorites)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

@app.post("/api/favorites")
async def add_favorite(request: FavoriteRequest):
    try:
        user_id = request.initData or "anonymous"
        if user_id not in user_favorites:
            user_favorites[user_id] = []
        
        favorite_item = {
            "type": request.type,
            "content": request.content,
            "added_at": datetime.now(timezone.utc).isoformat()
        }
        
        user_favorites[user_id].append(favorite_item)
        return {
            "success": True,
            "message": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "total_favorites": len(user_favorites[user_id])
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

@app.get("/api/questions")
async def get_all_questions():
    """–û—Ç–¥–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    return {
        "success": True,
        "questions": COUPLE_GAMES_DATA,
        "total_questions": sum(len(category) for category in COUPLE_GAMES_DATA.values()),
        "categories": list(COUPLE_GAMES_DATA.keys())
    }

# ============ –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ò–ì–† ============
# ============ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ò–ì–† ============
@app.post("/api/create-room")
async def create_room(request: CreateRoomRequest):
    """–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        room_id = str(uuid.uuid4())[:8].upper()
        
        room = {
            "room_id": room_id,
            "created_at": datetime.now(timezone.utc),
            "players": [request.creator_name],
            "game_type": request.game_type,
            "current_question": 0,
            "current_phase": 1,  # 1 = Player1 –æ—Ç–≤–µ—á–∞–µ—Ç, Player2 —É–≥–∞–¥—ã–≤–∞–µ—Ç
            "current_answerer": request.creator_name,  # –ö—Ç–æ —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–±—è
            "answers": {},  # –û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –æ —Å–µ–±–µ
            "guesses": {},  # –î–æ–≥–∞–¥–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö
            "status": "waiting"
        }
        
        game_rooms[room_id] = room
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ {room_id} –¥–ª—è –∏–≥—Ä—ã {request.game_type}")
        
        return {
            "success": True,
            "room_id": room_id,
            "message": f"–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: {room_id}"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")

@app.get("/api/game-question/{room_id}")
async def get_game_question(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        room = game_rooms.get(room_id)
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        game_questions = []
        if room["game_type"] == "mixed":
            for category in COUPLE_GAMES_DATA.values():
                game_questions.extend(category)
        else:
            game_questions = COUPLE_GAMES_DATA.get(room["game_type"], [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        total_rounds = len(game_questions) * 2  # –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –≤ –¥–≤—É—Ö —Ñ–∞–∑–∞—Ö
        
        if room["current_question"] >= total_rounds:
            room["status"] = "completed"
            logger.info(f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {room['current_question']}")
            return {"completed": True, "message": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ —Ñ–∞–∑—É
        question_index = (room["current_question"] // 2) % len(game_questions)
        phase = room["current_phase"]
        current_answerer = room["current_answerer"]
        players = room["players"]
        
        question_data = game_questions[question_index]
        
        # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        if current_answerer == players[0]:  # Player1 –æ—Ç–≤–µ—á–∞–µ—Ç
            if phase == 1:
                # Player1 –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–±—è
                question_text = question_data["question"].replace("–ø–∞—Ä—Ç–Ω–µ—Ä", "–≤—ã").replace("–≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä", "–≤—ã")
                instruction = f"({players[0]} –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–±—è)"
                role = "answering"
            else:
                # Player1 —É–≥–∞–¥—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç Player2
                question_text = question_data["question"].replace("–ø–∞—Ä—Ç–Ω–µ—Ä", players[1])
                instruction = f"({players[0]} —É–≥–∞–¥—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è {players[1]})"
                role = "guessing"
        else:  # Player2
            if phase == 1:
                # Player2 —É–≥–∞–¥—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç Player1
                question_text = question_data["question"].replace("–ø–∞—Ä—Ç–Ω–µ—Ä", players[0])
                instruction = f"({players[1]} —É–≥–∞–¥—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è {players[0]})"
                role = "guessing"
            else:
                # Player2 –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–±—è
                question_text = question_data["question"].replace("–ø–∞—Ä—Ç–Ω–µ—Ä", "–≤—ã").replace("–≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä", "–≤—ã")
                instruction = f"({players[1]} –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–±—è)"
                role = "answering"
        
        logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å {room['current_question']+1}/{total_rounds}, —Ñ–∞–∑–∞ {phase}, –æ—Ç–≤–µ—á–∞–µ—Ç: {current_answerer}")
        
        return {
            "question_id": room["current_question"],
            "question": question_text,
            "instruction": instruction,
            "options": question_data["options"],
            "category": question_data["category"],
            "total_questions": total_rounds,
            "current_number": room["current_question"] + 1,
            "phase": phase,
            "current_answerer": current_answerer,
            "role": role,  # "answering" –∏–ª–∏ "guessing"
            "source": "JSON file"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_game_question: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/submit-answer")
async def submit_answer(request: AnswerRequest):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        room = game_rooms.get(request.room_id)
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        players = room["players"]
        current_answerer = room["current_answerer"]
        phase = room["current_phase"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ - –æ—Ç–≤–µ—Ç –∑–∞ —Å–µ–±—è –∏–ª–∏ –¥–æ–≥–∞–¥–∫–∞ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        if request.player_name == current_answerer:
            if phase == 1 and current_answerer == players[0]:
                # Player1 –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–±—è
                room["answers"][f"{request.question_id}_{players[0]}"] = request.answer
                logger.info(f"üí≠ {players[0]} –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ —Å–µ–±—è: {request.answer}")
            elif phase == 2 and current_answerer == players[1]:
                # Player2 –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–±—è
                room["answers"][f"{request.question_id}_{players[1]}"] = request.answer
                logger.info(f"üí≠ {players[1]} –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ —Å–µ–±—è: {request.answer}")
            else:
                # –ò–≥—Ä–æ–∫ —É–≥–∞–¥—ã–≤–∞–µ—Ç
                target_player = players[1] if request.player_name == players[0] else players[0]
                room["guesses"][f"{request.question_id}_{request.player_name}_about_{target_player}"] = request.answer
                logger.info(f"üîÆ {request.player_name} —É–≥–∞–¥—ã–≤–∞–µ—Ç –ø—Ä–æ {target_player}: {request.answer}")
        else:
            # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ (–Ω–µ current_answerer) –≤—Å–µ–≥–¥–∞ —É–≥–∞–¥—ã–≤–∞–µ—Ç
            target_player = current_answerer
            room["guesses"][f"{request.question_id}_{request.player_name}_about_{target_player}"] = request.answer
            logger.info(f"üîÆ {request.player_name} —É–≥–∞–¥—ã–≤–∞–µ—Ç –ø—Ä–æ {target_player}: {request.answer}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
        round_complete = False
        if phase == 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∏ –¥–æ–≥–∞–¥–∫–∞ –æ—Ç —É–≥–∞–¥—ã–≤–∞—é—â–µ–≥–æ
            answer_key = f"{request.question_id}_{current_answerer}"
            guesser = players[1] if current_answerer == players[0] else players[0]
            guess_key = f"{request.question_id}_{guesser}_about_{current_answerer}"
            
            round_complete = answer_key in room["answers"] and guess_key in room["guesses"]
        else:
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è phase 2
            answer_key = f"{request.question_id}_{current_answerer}"
            guesser = players[0] if current_answerer == players[1] else players[1]
            guess_key = f"{request.question_id}_{guesser}_about_{current_answerer}"
            
            round_complete = answer_key in room["answers"] and guess_key in room["guesses"]
        
        if round_complete:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            if phase == 1:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ 2 (–º–µ–Ω—è–µ–º —Ä–æ–ª–∏)
                room["current_phase"] = 2
                room["current_answerer"] = players[1] if current_answerer == players[0] else players[0]
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                room["current_question"] += 1
                room["current_phase"] = 1
                room["current_answerer"] = players[0]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            
            logger.info(f"‚úÖ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É")
        
        return {
            "success": True,
            "waiting_for_partner": not round_complete,
            "message": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!" if not round_complete else "–û–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏! –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø."
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")

@app.get("/api/game-results/{room_id}")
async def get_game_results(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–¥—Å—á–µ—Ç–∞"""
    try:
        logger.info(f"üèÜ –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: {room_id}")
        
        room = game_rooms.get(room_id)
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if room["status"] != "completed":
            return {"completed": False, "message": "–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
        
        players = room["players"]
        answers = room.get("answers", {})
        guesses = room.get("guesses", {})
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–æ–≥–∞–¥–∫–∏
        correct_guesses = 0
        total_guesses = 0
        results = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        game_questions = []
        if room["game_type"] == "mixed":
            for category in COUPLE_GAMES_DATA.values():
                game_questions.extend(category)
        else:
            game_questions = COUPLE_GAMES_DATA.get(room["game_type"], [])
        
        for q_id in range(len(game_questions)):
            # Player1 –æ—Ç–≤–µ—á–∞–µ—Ç, Player2 —É–≥–∞–¥—ã–≤–∞–µ—Ç
            p1_answer = answers.get(f"{q_id}_{players[0]}")
            p2_guess_about_p1 = guesses.get(f"{q_id}_{players[1]}_about_{players[0]}")
            
            # Player2 –æ—Ç–≤–µ—á–∞–µ—Ç, Player1 —É–≥–∞–¥—ã–≤–∞–µ—Ç  
            p2_answer = answers.get(f"{q_id}_{players[1]}")
            p1_guess_about_p2 = guesses.get(f"{q_id}_{players[0]}_about_{players[1]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ–≥–∞–¥–æ–∫
            if p1_answer and p2_guess_about_p1:
                total_guesses += 1
                if p1_answer == p2_guess_about_p1:
                    correct_guesses += 1
                    
            if p2_answer and p1_guess_about_p2:
                total_guesses += 1
                if p2_answer == p1_guess_about_p2:
                    correct_guesses += 1
            
            results.append({
                "question_id": q_id,
                "question": game_questions[q_id]["question"],
                "player1_answer": p1_answer,
                "player2_guess_about_player1": p2_guess_about_p1,
                "player2_answer": p2_answer,
                "player1_guess_about_player2": p1_guess_about_p2,
                "p2_guessed_p1_correctly": p1_answer == p2_guess_about_p1 if p1_answer and p2_guess_about_p1 else False,
                "p1_guessed_p2_correctly": p2_answer == p1_guess_about_p2 if p2_answer and p1_guess_about_p2 else False
            })
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–æ–≥–∞–¥–æ–∫
        compatibility_percent = (correct_guesses / total_guesses * 100) if total_guesses > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç –≥–Ω–æ–º–æ–≤
        gnome_analysis = get_gnome_compatibility_analysis(compatibility_percent)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {correct_guesses}/{total_guesses} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–æ–≥–∞–¥–æ–∫ ({compatibility_percent:.1f}%)")
        
        return {
            "completed": True,
            "correct_guesses": correct_guesses,
            "total_guesses": total_guesses,
            "compatibility_percent": compatibility_percent,
            "results": results,
            "gnome_analysis": gnome_analysis,
            "explanation": f"–ò–∑ {total_guesses} –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å {correct_guesses}"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
        # ============ –†–ï–¢–†–û–ì–†–ê–î–ù–´–ô –ú–ï–†–ö–£–†–ò–ô ============
MERCURY_RETROGRADE_2025 = [
    {
        "phase": "Mercury Retrograde #1",
        "pre_shadow_start": "2025-02-28",
        "retrograde_start": "2025-03-14", 
        "retrograde_end": "2025-04-07",
        "post_shadow_end": "2025-04-26",
        "signs": ["Aries", "Pisces"],
        "influences": {
            "communication": "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ, –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–≤–∞–∂–¥—ã",
            "travel": "–ü–ª–∞–Ω—ã –ø–æ–µ–∑–¥–æ–∫ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∏–ª–µ—Ç—ã",
            "technology": "–î–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ –≤–æ–∑–º–æ–∂–Ω—ã",
            "relationships": "–°—Ç–∞—Ä—ã–µ –∑–Ω–∞–∫–æ–º—ã–µ –º–æ–≥—É—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å"
        }
    },
    {
        "phase": "Mercury Retrograde #2", 
        "pre_shadow_start": "2025-06-29",
        "retrograde_start": "2025-07-17",
        "retrograde_end": "2025-08-11", 
        "post_shadow_end": "2025-08-25",
        "signs": ["Leo"],
        "influences": {
            "creativity": "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞–π–¥–µ—Ç –Ω–æ–≤—ã–µ –ø—É—Ç–∏",
            "self_expression": "–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è–º–∏ –∏ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π", 
            "romance": "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–∑-–∑–∞ –≥–æ—Ä–¥–æ—Å—Ç–∏",
            "performance": "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
        }
    },
    {
        "phase": "Mercury Retrograde #3",
        "pre_shadow_start": "2025-10-21", 
        "retrograde_start": "2025-11-09",
        "retrograde_end": "2025-11-29",
        "post_shadow_end": "2025-12-16", 
        "signs": ["Sagittarius"],
        "influences": {
            "learning": "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —É—á–µ–±–µ",
            "travel": "–î–∞–ª—å–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –¥–µ—Ç–∞–ª—è–º",
            "beliefs": "–í—Ä–µ–º—è –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å —Å–≤–æ–∏ –≤–∑–≥–ª—è–¥—ã –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é –∂–∏–∑–Ω–∏", 
            "legal": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–π —Å—Ä–æ–∫"
        }
    }
]

def get_mercury_status(date_str: str = None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ú–µ—Ä–∫—É—Ä–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    from datetime import datetime
    
    if date_str is None:
        check_date = datetime.now().strftime("%Y-%m-%d")
    else:
        check_date = date_str
    
    for period in MERCURY_RETROGRADE_2025:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∞–∑—É —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞
        if period["retrograde_start"] <= check_date <= period["retrograde_end"]:
            return {
                "status": "retrograde",
                "phase": period["phase"],
                "signs": period["signs"],
                "influences": period["influences"],
                "start_date": period["retrograde_start"],
                "end_date": period["retrograde_end"],
                "message": f"ü™ê –ú–µ—Ä–∫—É—Ä–∏–π –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–µ –≤ –∑–Ω–∞–∫–µ {', '.join(period['signs'])}! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏."
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–Ω–µ–≤—É—é —Ñ–∞–∑—É (–¥–æ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞)
        elif period["pre_shadow_start"] <= check_date < period["retrograde_start"]:
            return {
                "status": "pre_shadow", 
                "phase": period["phase"],
                "signs": period["signs"],
                "influences": period["influences"],
                "start_date": period["retrograde_start"],
                "end_date": period["retrograde_end"],
                "message": f"‚ö° –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π! –ù–∞—á–Ω–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Å {period['retrograde_start']}."
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–Ω–µ–≤—É—é —Ñ–∞–∑—É (–ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞)
        elif period["retrograde_end"] < check_date <= period["post_shadow_end"]:
            return {
                "status": "post_shadow",
                "phase": period["phase"], 
                "signs": period["signs"],
                "influences": period["influences"],
                "start_date": period["retrograde_start"],
                "end_date": period["retrograde_end"],
                "message": f"üåÖ –ú–µ—Ä–∫—É—Ä–∏–π –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞. –≠—Ñ—Ñ–µ–∫—Ç—ã –æ—Å–ª–∞–±–µ–≤–∞—é—Ç –¥–æ {period['post_shadow_end']}."
            }
    
    return {
        "status": "direct",
        "message": "‚ú® –ú–µ—Ä–∫—É—Ä–∏–π –¥–≤–∏–∂–µ—Ç—Å—è –ø—Ä—è–º–æ. –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π!",
        "influences": {
            "communication": "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤",
            "technology": "–¢–µ—Ö–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", 
            "travel": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≥–ª–∞–¥–∫–æ, –º–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏",
            "contracts": "–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤"
        }
    }

def get_weekly_mercury_forecast():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤–ª–∏—è–Ω–∏—è –ú–µ—Ä–∫—É—Ä–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    from datetime import datetime, timedelta
    
    today = datetime.now()
    forecast = []
    
    for i in range(7):
        date = (today + timedelta(days=i)).strftime("%Y-%m-%d")
        status = get_mercury_status(date)
        forecast.append({
            "date": date,
            "day_name": (today + timedelta(days=i)).strftime("%A"), 
            "mercury_status": status["status"],
            "message": status["message"],
            "key_influences": list(status["influences"].keys())[:2] if "influences" in status else []
        })
    
    return {
        "week_forecast": forecast,
        "summary": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–ª–∏—è–Ω–∏—è –ú–µ—Ä–∫—É—Ä–∏—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏"
    }

# API endpoint –¥–ª—è –ú–µ—Ä–∫—É—Ä–∏—è
@app.get("/api/mercury-status")
async def get_mercury_retrograde_status(date: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è"""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ú–µ—Ä–∫—É—Ä–∏—è –Ω–∞ –¥–∞—Ç—É: {date}")
        
        mercury_info = get_mercury_status(date)
        weekly_forecast = get_weekly_mercury_forecast()
        
        return {
            "success": True,
            "current_status": mercury_info,
            "weekly_forecast": weekly_forecast,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ú–µ—Ä–∫—É—Ä–∏—è: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ú–µ—Ä–∫—É—Ä–∏—è")


# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============
def get_gnome_compatibility_analysis(percent: float) -> dict:
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–Ω–æ–º–æ–≤"""
    if percent >= 80:
        return {
            "gnome": "–ì–Ω–æ–º-–°–µ—Ä–¥—Ü–µ–≤–µ–¥",
            "title": "–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞! üíï",
            "message": "–ì–Ω–æ–º-–°–µ—Ä–¥—Ü–µ–≤–µ–¥ –≤–æ—Å—Ö–∏—â–µ–Ω: '–í—ã —Å–ª–æ–≤–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞! –í–∞—à–∏ –¥—É—à–∏ –ø–æ—é—Ç –≤ —É–Ω–∏—Å–æ–Ω!'",
            "advice": "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - —É –≤–∞—Å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –±—É–¥—É—â–µ–≥–æ!",
            "color": "#ff69b4"
        }
    elif percent >= 60:
        return {
            "gnome": "–ì–Ω–æ–º-–ú—É–¥—Ä–µ—Ü",
            "title": "–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! üíñ",
            "message": "–ì–Ω–æ–º-–ú—É–¥—Ä–µ—Ü –∫–∏–≤–∞–µ—Ç: '–í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –≠—Ç–æ –∫—Ä–µ–ø–∫–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π!'",
            "advice": "–£–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—â–µ–Ω–∏—é - —É–∑–Ω–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –µ—â–µ –ª—É—á—à–µ!",
            "color": "#4169e1"
        }
    elif percent >= 40:
        return {
            "gnome": "–ì–Ω–æ–º-–î–∏–ø–ª–æ–º–∞—Ç",
            "title": "–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! üíô",
            "message": "–ì–Ω–æ–º-–î–∏–ø–ª–æ–º–∞—Ç —Ä–∞–∑–º—ã—à–ª—è–µ—Ç: '–£ –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!'",
            "advice": "–ë–æ–ª—å—à–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö. –†–∞–∑–ª–∏—á–∏—è –º–æ–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Å–∏–ª—É!",
            "color": "#32cd32"
        }
    else:
        return {
            "gnome": "–ì–Ω–æ–º-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            "title": "–í—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏–π! üíõ",
            "message": "–ì–Ω–æ–º-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —É–ª—ã–±–∞–µ—Ç—Å—è: '–í—ã - –¥–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏! –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!'",
            "advice": "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ò–∑—É—á–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –õ—é–±–æ–≤—å —Ä–∞—Å—Ç–µ—Ç —á–µ—Ä–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!",
            "color": "#ffa500"
        }

@app.get("/robots.txt")
async def robots_txt():
    return "User-agent: *\nDisallow: /"

# ============ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ============
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Gnome Horoscope API –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port
    )
