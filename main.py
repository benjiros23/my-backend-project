import os
import json
import random
import logging
import uuid
import asyncio
from datetime import datetime, timezone, timedelta
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, Any, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Gnome Horoscope API", version="1.0.0")

# CORS (—Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –¥–æ–º–µ–Ω–∞–º)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–û–î–ï–õ–ò ============
class FavoriteRequest(BaseModel):
    initData: str = ""
    type: str
    content: Any

# ============ –ù–û–í–´–ï –ú–û–î–ï–õ–ò –î–õ–Ø –ò–ì–† ============
class GameRoom(BaseModel):
    room_id: str
    created_at: datetime
    players: List[str] = []
    game_type: str = ""
    current_question: int = 0
    answers: Dict[str, Any] = {}  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Any –≤–º–µ—Å—Ç–æ any
    status: str = "waiting"  # waiting, playing, completed


class JoinRoomRequest(BaseModel):
    room_id: str
    player_name: str
    initData: str = ""

class AnswerRequest(BaseModel):
    room_id: str
    player_name: str
    question_id: int
    answer: str
    initData: str = ""

# ============ –î–ê–ù–ù–´–ï ============

# –ì–æ—Ä–æ—Å–∫–æ–ø—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
HOROSCOPE_TEMPLATES = [
    "–ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –≤–∞–º –ø—Ä–æ—è–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É! –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
    "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ - –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥–µ—Ç –≤ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö.",
    "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
    "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª–∞—Ö, –±–ª–∏–∑–∫–∏–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
    "–í—Ä–µ–º—è –ø—Ä–æ—è–≤–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏! –ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.",
    "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–µ–ª–∞–º –ø—Ä–∏–Ω–µ—Å–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
    "–ò—â–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ–º - —Ä–∞–±–æ—Ç–µ, –æ—Ç–¥—ã—Ö–µ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
    "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
    "–†–∞—Å—à–∏—Ä—å—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã! –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ—Ç–∫—Ä–æ—é—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã.",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏.",
    "–í—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö –∏–¥–µ–π –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π!",
    "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Ç–µ—á–µ–Ω–∏—é –∂–∏–∑–Ω–∏, –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å."
]

# –ö–∞—Ä—Ç—ã –¥–Ω—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
DAY_CARDS = [
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç", "—Å–æ–≤–µ—Ç": "–°–µ–≥–æ–¥–Ω—è –≤—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π! –ù–µ –±–æ–π—Å—è —Ä–∏—Å–∫–Ω—É—Ç—å - —Ñ–æ—Ä—Ç—É–Ω–∞ –ª—é–±–∏—Ç —Ö—Ä–∞–±—Ä—ã—Ö."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ø–æ–≤–∞—Ä", "—Å–æ–≤–µ—Ç": "–î–µ–Ω—å –¥–ª—è –∑–∞–±–æ—Ç—ã –æ —Å–≤–æ–µ–º —Ç–µ–ª–µ –∏ –¥—É—à–µ. –ü—Ä–∏–≥–æ—Ç–æ–≤—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –∏–ª–∏ –ø–æ–±–∞–ª—É–π —Å–µ–±—è."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Å–∞–¥–æ–≤–Ω–∏–∫", "—Å–æ–≤–µ—Ç": "–í—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ–Ω–∞ –±—É–¥—É—â–∏—Ö —É—Å–ø–µ—Ö–æ–≤. –ù–µ–±–æ–ª—å—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å—É—Ç –±–æ–ª—å—à–∏–µ –ø–ª–æ–¥—ã."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", "—Å–æ–≤–µ—Ç": "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–º—É–∑—ã–∫–∞–Ω—Ç", "—Å–æ–≤–µ—Ç": "–ù–∞–π–¥–∏ —Å–≤–æ–π —Ä–∏—Ç–º –¥–Ω—è. –í–∫–ª—é—á–∏ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É –∏ –ø–æ–∑–≤–æ–ª—å –º–µ–ª–æ–¥–∏–∏ –≤–µ—Å—Ç–∏ —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-—Ñ–∏–ª–æ—Å–æ—Ñ", "—Å–æ–≤–µ—Ç": "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–µ—Å—É—Ç —è—Å–Ω–æ—Å—Ç—å. –£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑—É —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –∏ –∂–µ–ª–∞–Ω–∏–π."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫", "—Å–æ–≤–µ—Ç": "–ù–æ–≤—ã–µ –º–µ—Å—Ç–∞ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç! –î–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ–º."},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–Ω–æ–º-–º–∞—Å—Ç–µ—Ä", "—Å–æ–≤–µ—Ç": "–†—É–∫–∏ –ø–æ–º–Ω—è—Ç –º—É–¥—Ä–æ—Å—Ç—å. –ó–∞–π–º–∏—Ç–µ—Å—å –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º –∏–ª–∏ –æ—Å–≤–æ–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫."}
]

# –ù–û–í–´–ï –î–ê–ù–ù–´–ï - –ò–≥—Ä—ã –¥–ª—è –ø–∞—Ä
COUPLE_GAMES_DATA = {
    "fruit_game": [
        {
            "question": "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üçé –Ø–±–ª–æ–∫–æ", "üçå –ë–∞–Ω–∞–Ω", "üçä –ê–ø–µ–ª—å—Å–∏–Ω", "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "ü•≠ –ú–∞–Ω–≥–æ", "üçì –ö–ª—É–±–Ω–∏–∫–∞"],
            "category": "taste"
        },
        {
            "question": "–ö–∞–∫–æ–π —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ—Ä—É–∫—Ç —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["ü•• –ö–æ–∫–æ—Å", "ü•ù –ö–∏–≤–∏", "üçç –ê–Ω–∞–Ω–∞—Å", "ü•≠ –ú–∞–Ω–≥–æ", "üçà –î—ã–Ω—è", "üçë –ß–µ—Ä–µ—à–Ω—è"],
            "category": "taste"
        }
    ],
    "preference_test": [
        {
            "question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É?",
            "options": ["‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–π", "üíô –°–∏–Ω–∏–π", "üíö –ó–µ–ª–µ–Ω—ã–π", "üíõ –ñ–µ–ª—Ç—ã–π", "üíú –§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "üñ§ –ß–µ—Ä–Ω—ã–π"],
            "category": "colors"
        },
        {
            "question": "–ö–∞–∫—É—é –º—É–∑—ã–∫—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üé∏ –†–æ–∫", "üéµ –ü–æ–ø", "üéπ –ö–ª–∞—Å—Å–∏–∫–∞", "üé∫ –î–∂–∞–∑", "üé§ –†—ç–ø", "üéª –ò–Ω–¥–∏"],
            "category": "music"
        },
        {
            "question": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ª—é–±–∏—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üå∏ –í–µ—Å–Ω–∞", "‚òÄÔ∏è –õ–µ—Ç–æ", "üçÇ –û—Å–µ–Ω—å", "‚ùÑÔ∏è –ó–∏–º–∞"],
            "category": "seasons"
        }
    ],
    "date_ideas": [
        {
            "question": "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
            "options": ["üé¨ –ö–∏–Ω–æ", "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω", "üèûÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ", "üè† –î–æ–º–∞ —Å —Ñ–∏–ª—å–º–æ–º", "üé≠ –¢–µ–∞—Ç—Ä", "üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
            "category": "date_type"
        },
        {
            "question": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä?",
            "options": ["üåÖ –£—Ç—Ä–æ", "‚òÄÔ∏è –î–µ–Ω—å", "üåÜ –í–µ—á–µ—Ä", "üåô –ù–æ—á—å"],
            "category": "date_time"
        }
    ]
}

# ============ –•–†–ê–ù–ò–õ–ò–©–ê ============

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
user_favorites = {}

# –ù–û–í–û–ï - –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - Redis –∏–ª–∏ –ë–î)
game_rooms: Dict[str, GameRoom] = {}

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ============

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"Unexpected error: {str(exc)}")
    return {"error": "Internal server error", "detail": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}

# ============ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –†–û–£–¢–´ ============

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç"""
    return {
        "message": "üßô‚Äç‚ôÇÔ∏è Gnome Horoscope API is running!",
        "status": "ok",
        "version": "1.0.0",
        "endpoints": [
            "GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
            "GET /api/horoscope?sign=–ó–ù–ê–ö - –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø",
            "POST /api/day-card - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è",
            "GET /api/favorites - –ø–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "POST /api/favorites - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "POST /api/create-room - —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É",
            "POST /api/join-room - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ",
            "GET /api/room-status/{room_id} - —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã"
        ]
    }

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return {
        "status": "ok", 
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "service": "Gnome Horoscope API"
    }

@app.get("/api/horoscope")
async def get_horoscope(sign: str, date: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    try:
        if date is None:
            date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign} –Ω–∞ {date}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–∫–∞ –∏ –¥–∞—Ç—ã
        seed = hash(f"{sign}{date}") % len(HOROSCOPE_TEMPLATES)
        horoscope_text = HOROSCOPE_TEMPLATES[seed]
        
        return {
            "sign": sign,
            "date": date,
            "text": horoscope_text,
            "cached": False,
            "source": "Gnome Horoscope API"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞")

@app.post("/api/day-card")
async def get_day_card(request: Dict[str, Any] = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è"""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –¥–Ω—è")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        card = random.choice(DAY_CARDS)
        
        return {
            "title": card["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
            "text": card["—Å–æ–≤–µ—Ç"],
            "reused": False,
            "date": datetime.now(timezone.utc).strftime("%Y-%m-%d"),
            "source": "Gnome Horoscope API"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è")

@app.get("/api/favorites")
async def get_favorites(initData: str = ""):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º initData –∫–∞–∫ –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –ø–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è)
        user_id = initData or "anonymous"
        favorites = user_favorites.get(user_id, [])
        
        return {
            "favorites": favorites,
            "success": True,
            "message": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
            "count": len(favorites)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

@app.post("/api/favorites")
async def add_favorite(request: FavoriteRequest):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: —Ç–∏–ø {request.type}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º initData –∫–∞–∫ –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = request.initData or "anonymous"
        
        if user_id not in user_favorites:
            user_favorites[user_id] = []
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorite_item = {
            "type": request.type,
            "content": request.content,
            "added_at": datetime.now(timezone.utc).isoformat()
        }
        
        user_favorites[user_id].append(favorite_item)
        
        return {
            "success": True,
            "message": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "total_favorites": len(user_favorites[user_id])
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

@app.get("/robots.txt")
async def robots_txt():
    """–§–∞–π–ª robots.txt –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ä–æ–±–æ—Ç–æ–≤"""
    return "User-agent: *\nDisallow: /"

# ============ –ù–û–í–´–ï –†–û–£–¢–´ –î–õ–Ø –ò–ì–† ============

@app.post("/api/create-room")
async def create_room(request: dict):
    """–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"""
    try:
        room_id = str(uuid.uuid4())[:8].upper()
        game_type = request.get('game_type', 'mixed')
        creator_name = request.get('creator_name', 'Player1')
        
        room = GameRoom(
            room_id=room_id,
            created_at=datetime.now(timezone.utc),
            players=[creator_name],
            game_type=game_type,
            status="waiting"
        )
        
        game_rooms[room_id] = room
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ {room_id} –¥–ª—è –∏–≥—Ä—ã {game_type}")
        
        return {
            "success": True,
            "room_id": room_id,
            "message": f"–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: {room_id}"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")

@app.post("/api/join-room")
async def join_room(request: JoinRoomRequest):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ"""
    try:
        room = game_rooms.get(request.room_id)
        
        if not room:
            return {"success": False, "message": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
        if len(room.players) >= 2:
            return {"success": False, "message": "–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞"}
            
        if request.player_name not in room.players:
            room.players.append(request.player_name)
            
        # –ï—Å–ª–∏ –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        if len(room.players) == 2:
            room.status = "playing"
            
        return {
            "success": True,
            "message": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!",
            "players": room.players,
            "status": room.status
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ")

@app.get("/api/room-status/{room_id}")
async def get_room_status(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        room = game_rooms.get(room_id)
        
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        return {
            "room_id": room_id,
            "players": room.players,
            "status": room.status,
            "current_question": room.current_question,
            "player_count": len(room.players)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@app.get("/api/game-question/{room_id}")
async def get_game_question(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–≥—Ä—ã"""
    try:
        room = game_rooms.get(room_id)
        
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∏–ø–∞ –∏–≥—Ä—ã
        game_questions = []
        if room.game_type == "mixed":
            # –°–º–µ—à–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ - –≤—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            for category in COUPLE_GAMES_DATA.values():
                game_questions.extend(category)
        else:
            game_questions = COUPLE_GAMES_DATA.get(room.game_type, [])
            
        if room.current_question >= len(game_questions):
            room.status = "completed"
            return {"completed": True, "message": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"}
            
        question = game_questions[room.current_question]
        
        return {
            "question_id": room.current_question,
            "question": question["question"],
            "options": question["options"],
            "category": question["category"],
            "total_questions": len(game_questions)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞")

@app.post("/api/submit-answer")
async def submit_answer(request: AnswerRequest):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    try:
        room = game_rooms.get(request.room_id)
        
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answer_key = f"{request.question_id}_{request.player_name}"
        room.answers[answer_key] = request.answer
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
        other_player = [p for p in room.players if p != request.player_name][0]
        other_answer_key = f"{request.question_id}_{other_player}"
        
        both_answered = other_answer_key in room.answers
        
        if both_answered:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            room.current_question += 1
            
        return {
            "success": True,
            "waiting_for_partner": not both_answered,
            "message": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!" if not both_answered else "–û–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")

@app.get("/api/game-results/{room_id}")
async def get_game_results(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã"""
    try:
        room = game_rooms.get(room_id)
        
        if not room:
            raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        if room.status != "completed":
            return {"completed": False, "message": "–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        matches = 0
        total_questions = room.current_question
        results = []
        
        for q_id in range(total_questions):
            player1_answer = room.answers.get(f"{q_id}_{room.players[0]}")
            player2_answer = room.answers.get(f"{q_id}_{room.players[1]}")
            
            match = player1_answer == player2_answer
            if match:
                matches += 1
                
            results.append({
                "question_id": q_id,
                "player1_answer": player1_answer,
                "player2_answer": player2_answer,
                "match": match
            })
        
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≥–Ω–æ–º–∞–º
        compatibility_percent = (matches / total_questions) * 100 if total_questions > 0 else 0
        gnome_analysis = get_gnome_compatibility_analysis(compatibility_percent)
        
        return {
            "completed": True,
            "matches": matches,
            "total_questions": total_questions,
            "compatibility_percent": compatibility_percent,
            "results": results,
            "gnome_analysis": gnome_analysis
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def get_gnome_compatibility_analysis(percent: float) -> dict:
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–Ω–æ–º–æ–≤"""
    if percent >= 80:
        return {
            "gnome": "–ì–Ω–æ–º-–°–µ—Ä–¥—Ü–µ–≤–µ–¥",
            "title": "–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞! üíï",
            "message": "–ì–Ω–æ–º-–°–µ—Ä–¥—Ü–µ–≤–µ–¥ –≤–æ—Å—Ö–∏—â–µ–Ω: '–í—ã —Å–ª–æ–≤–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞! –í–∞—à–∏ –¥—É—à–∏ –ø–æ—é—Ç –≤ —É–Ω–∏—Å–æ–Ω!'",
            "advice": "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - —É –≤–∞—Å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –±—É–¥—É—â–µ–≥–æ!",
            "color": "#ff69b4"
        }
    elif percent >= 60:
        return {
            "gnome": "–ì–Ω–æ–º-–ú—É–¥—Ä–µ—Ü",
            "title": "–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! üíñ",
            "message": "–ì–Ω–æ–º-–ú—É–¥—Ä–µ—Ü –∫–∏–≤–∞–µ—Ç: '–í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –≠—Ç–æ –∫—Ä–µ–ø–∫–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π!'",
            "advice": "–£–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—â–µ–Ω–∏—é - —É–∑–Ω–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –µ—â–µ –ª—É—á—à–µ!",
            "color": "#4169e1"
        }
    elif percent >= 40:
        return {
            "gnome": "–ì–Ω–æ–º-–î–∏–ø–ª–æ–º–∞—Ç",
            "title": "–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! üíô",
            "message": "–ì–Ω–æ–º-–î–∏–ø–ª–æ–º–∞—Ç —Ä–∞–∑–º—ã—à–ª—è–µ—Ç: '–£ –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!'",
            "advice": "–ë–æ–ª—å—à–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö. –†–∞–∑–ª–∏—á–∏—è –º–æ–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Å–∏–ª—É!",
            "color": "#32cd32"
        }
    else:
        return {
            "gnome": "–ì–Ω–æ–º-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            "title": "–í—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏–π! üíõ",
            "message": "–ì–Ω–æ–º-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —É–ª—ã–±–∞–µ—Ç—Å—è: '–í—ã - –¥–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏! –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!'",
            "advice": "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ò–∑—É—á–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –õ—é–±–æ–≤—å —Ä–∞—Å—Ç–µ—Ç —á–µ—Ä–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!",
            "color": "#ffa500"
        }

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
async def cleanup_old_rooms():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤"""
    cutoff_time = datetime.now(timezone.utc) - timedelta(hours=2)
    
    rooms_to_delete = [
        room_id for room_id, room in game_rooms.items() 
        if room.created_at < cutoff_time
    ]
    
    for room_id in rooms_to_delete:
        del game_rooms[room_id]
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–æ–º–Ω–∞—Ç–∞ {room_id}")

# –î–ª—è Render deployment
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Gnome Horoscope API –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)
