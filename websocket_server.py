import asyncio
import json
import uuid
from datetime import datetime
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from typing import Dict, List
import random

app = FastAPI()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç
game_rooms: Dict[str, dict] = {}
connections: Dict[str, WebSocket] = {}

class GameManager:
    def __init__(self):
        self.rooms = {}
    
    async def create_room(self, websocket: WebSocket, player_name: str):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"""
        room_code = str(random.randint(1000, 9999))
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
        while room_code in self.rooms:
            room_code = str(random.randint(1000, 9999))
        
        player_id = str(uuid.uuid4())
        
        self.rooms[room_code] = {
            "room_code": room_code,
            "players": {
                player_id: {
                    "name": player_name,
                    "websocket": websocket,
                    "ready": False,
                    "answers": {}
                }
            },
            "game_state": "waiting",  # waiting, playing, finished
            "current_question": 0,
            "questions": [
                {
                    "id": 1,
                    "question": "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –≤—ã–±–µ—Ä–µ—Ç –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?",
                    "options": [
                        {"id": "apple", "name": "–Ø–±–ª–æ–∫–æ", "emoji": "üçé"},
                        {"id": "banana", "name": "–ë–∞–Ω–∞–Ω", "emoji": "üçå"},
                        {"id": "strawberry", "name": "–ö–ª—É–±–Ω–∏–∫–∞", "emoji": "üçì"},
                        {"id": "orange", "name": "–ê–ø–µ–ª—å—Å–∏–Ω", "emoji": "üçä"}
                    ]
                },
                {
                    "id": 2,
                    "question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä—É?",
                    "options": [
                        {"id": "red", "name": "–ö—Ä–∞—Å–Ω—ã–π", "emoji": "‚ù§Ô∏è"},
                        {"id": "blue", "name": "–°–∏–Ω–∏–π", "emoji": "üíô"},
                        {"id": "green", "name": "–ó–µ–ª–µ–Ω—ã–π", "emoji": "üíö"},
                        {"id": "yellow", "name": "–ñ–µ–ª—Ç—ã–π", "emoji": "üíõ"}
                    ]
                }
            ],
            "created_at": datetime.now().isoformat()
        }
        
        await self.send_to_player(websocket, {
            "type": "room_created",
            "room_code": room_code,
            "player_id": player_id
        })
        
        return room_code, player_id
    
    async def join_room(self, websocket: WebSocket, room_code: str, player_name: str):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
        if room_code not in self.rooms:
            await self.send_to_player(websocket, {
                "type": "error",
                "message": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            })
            return None, None
        
        room = self.rooms[room_code]
        
        if len(room["players"]) >= 2:
            await self.send_to_player(websocket, {
                "type": "error", 
                "message": "–ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞"
            })
            return None, None
        
        player_id = str(uuid.uuid4())
        room["players"][player_id] = {
            "name": player_name,
            "websocket": websocket,
            "ready": False,
            "answers": {}
        }
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
        await self.broadcast_to_room(room_code, {
            "type": "player_joined",
            "player_name": player_name,
            "players_count": len(room["players"])
        })
        
        await self.send_to_player(websocket, {
            "type": "room_joined",
            "room_code": room_code,
            "player_id": player_id
        })
        
        return room_code, player_id
    
    async def start_game(self, room_code: str):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"""
        room = self.rooms[room_code]
        room["game_state"] = "playing"
        room["current_question"] = 0
        
        question = room["questions"][0]
        
        await self.broadcast_to_room(room_code, {
            "type": "game_started",
            "question": question
        })
    
    async def submit_answer(self, room_code: str, player_id: str, answer: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"""
        room = self.rooms[room_code]
        current_q = room["current_question"]
        
        room["players"][player_id]["answers"][current_q] = answer
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ
        answered_count = sum(1 for p in room["players"].values() 
                           if current_q in p["answers"])
        
        await self.broadcast_to_room(room_code, {
            "type": "answer_received",
            "player_id": player_id,
            "answered_count": answered_count,
            "total_players": len(room["players"])
        })
        
        # –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        if answered_count == len(room["players"]):
            await self.show_results(room_code, current_q)
    
    async def show_results(self, room_code: str, question_index: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞"""
        room = self.rooms[room_code]
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        answers = {}
        for pid, player in room["players"].items():
            answers[pid] = {
                "name": player["name"],
                "answer": player["answers"][question_index]
            }
        
        await self.broadcast_to_room(room_code, {
            "type": "round_results",
            "answers": answers
        })
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        await asyncio.sleep(3)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 3 —Å–µ–∫—É–Ω–¥—ã
        
        if question_index + 1 < len(room["questions"]):
            room["current_question"] += 1
            next_question = room["questions"][room["current_question"]]
            
            await self.broadcast_to_room(room_code, {
                "type": "next_question",
                "question": next_question
            })
        else:
            await self.finish_game(room_code)
    
    async def finish_game(self, room_code: str):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"""
        room = self.rooms[room_code]
        room["game_state"] = "finished"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        total_questions = len(room["questions"])
        matches = 0
        
        for q_index in range(total_questions):
            answers = [p["answers"][q_index] for p in room["players"].values()]
            if len(set(answers)) == 1:  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                matches += 1
        
        compatibility = round((matches / total_questions) * 100)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç –æ—Ç –≥–Ω–æ–º–æ–≤
        if compatibility >= 75:
            gnome_advice = "–ì–Ω–æ–º-–ö—É–ø–∏–¥–æ–Ω –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ! –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —Å –ø–æ–ª—É—Å–ª–æ–≤–∞!"
        elif compatibility >= 50:
            gnome_advice = "–ì–Ω–æ–º-–ú—É–¥—Ä–µ—Ü –∫–∏–≤–∞–µ—Ç: —Ö–æ—Ä–æ—à–µ–µ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ, –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
        else:
            gnome_advice = "–ì–Ω–æ–º-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: –±–æ–ª—å—à–µ —É–∑–Ω–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ!"
        
        await self.broadcast_to_room(room_code, {
            "type": "game_finished",
            "compatibility": compatibility,
            "matches": matches,
            "total": total_questions,
            "gnome_advice": gnome_advice
        })
    
    async def send_to_player(self, websocket: WebSocket, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –∏–≥—Ä–æ–∫—É"""
        try:
            await websocket.send_text(json.dumps(message))
        except:
            pass
    
    async def broadcast_to_room(self, room_code: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        if room_code not in self.rooms:
            return
        
        room = self.rooms[room_code]
        for player in room["players"].values():
            await self.send_to_player(player["websocket"], message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä
game_manager = GameManager()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    
    try:
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            
            if message["type"] == "create_room":
                await game_manager.create_room(
                    websocket, 
                    message["player_name"]
                )
            
            elif message["type"] == "join_room":
                await game_manager.join_room(
                    websocket,
                    message["room_code"], 
                    message["player_name"]
                )
            
            elif message["type"] == "start_game":
                await game_manager.start_game(message["room_code"])
            
            elif message["type"] == "submit_answer":
                await game_manager.submit_answer(
                    message["room_code"],
                    message["player_id"],
                    message["answer"]
                )
    
    except WebSocketDisconnect:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        pass
